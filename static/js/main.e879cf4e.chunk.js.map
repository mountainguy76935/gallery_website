{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/randomize/randomize.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","picture","width","height","name","tagline","CardList","map","key","id","Randomize","param","constant","newArr","test","num","i","length","Math","floor","random","indexOf","splice","push","pictures","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filteredPictures","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAMaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAY,QACb,yBAAKA,UAAU,SAASC,IAAI,kBAAkBC,IAAKH,EAAMI,QAAQD,IAAKE,MAAM,QAAQC,OAAO,UAC3F,4BAAKN,EAAMI,QAAQG,MACnB,2BAAIP,EAAMI,QAAQI,YCNbC,G,MAAW,SAAAT,GAAK,OACzB,yBAAKC,UAAY,aACZD,EAAMI,QAAQM,KAAI,SAAAN,GAAO,OAAK,kBAAC,EAAD,CAAMO,IAAOP,EAAQQ,GAAIR,QAAWA,UCH9DS,EAAY,SAAAb,GAAK,OAClB,kBAAC,EAAD,CAAUI,QAAY,SAASU,GAK3B,IAJA,IAAIC,EAAQ,YAAOD,GACfE,EAAM,YAAOF,GACbG,EAAO,GACPC,EAAM,EACFC,EAAG,EAAGA,EAAEJ,EAASK,OAAQD,IAAK,CACpC,GACED,EAAMG,KAAKC,MAAMD,KAAKE,SAASR,EAASK,cAEpCH,EAAKO,QAAQN,IAAM,GACzBF,EAAOS,OAAON,EAAG,EAAGJ,EAASG,IAC7BD,EAAKS,KAAKR,GAEZ,OAAOF,EAbW,CAcjBhB,EAAM2B,aCdVC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BAAO7B,UAAY,SAAS8B,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCmFnEG,G,kBAjFb,aAAe,IAAD,8BACZ,+CAwDFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAxDtC,EAAKC,MAAQ,CACXZ,SAAU,CACR,CACEpB,KAAM,QACNK,GAAI,OACJT,IAAK,yFACLK,QAAS,kCAEX,CACED,KAAM,SACNK,GAAI,OACJT,IAAK,mGACLK,QAAS,uDAEX,CACED,KAAM,WACNK,GAAI,OACJT,IAAK,6FACLK,QAAS,4BAEX,CACED,KAAM,MACNK,GAAI,OACJT,IAAK,uDACLK,QAAS,kDAEX,CACED,KAAM,YACNK,GAAI,OACJT,IAAK,oGACLK,QAAS,mDAEX,CACED,KAAM,YACNK,GAAI,OACJT,IAAK,oFACLK,QAAS,oCAEX,CACED,KAAM,SACNK,GAAI,OACJT,IAAK,iKACLK,QAAS,wDAEX,CACED,KAAM,aACNK,GAAI,OACJT,IAAK,gGACLK,QAAS,wDAGb4B,YAAa,IArDH,E,sEA6DJ,IAAD,EAC2BI,KAAKD,MAA/BZ,EADD,EACCA,SAAUS,EADX,EACWA,YACZK,EAAmBd,EAASe,QAAO,SAAAtC,GAAO,OAC5CA,EAAQG,KAAKoC,cAAcC,SAASR,EAAYO,kBAEpD,OACA,yBAAK1C,UAAU,OACb,qDACM,6BACA,6BACN,kBAAC,EAAD,CACE4B,YAAc,kBACdC,aAAgBU,KAAKV,eAEvB,kBAAC,EAAD,CAAWH,SAAYc,S,GA5EXI,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e879cf4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\n//Later we are going to implement https://www.npmjs.com/package/react-card-flip into this card to put some \r\n//text on the back! It will be dope.\r\n\r\nexport const Card = props => (\r\n    <div className = \"card\">\r\n        <img className=\"images\" alt=\"photos for game\" src={props.picture.src} width=\"180px\" height=\"180px\"/>\r\n        <h2>{props.picture.name}</h2>\r\n        <p>{props.picture.tagline}</p>\r\n    </div>\r\n)\r\n\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className = \"card-list\">\r\n        {props.picture.map(picture => (<Card key = {picture.id} picture = {picture}/>))}\r\n    </div>\r\n);","import React from 'react';\r\nimport { CardList } from '../card-list/card-list.component';\r\n\r\nexport const Randomize = props => (\r\n            <CardList picture = {(function(param) {\r\n                let constant = [...param];\r\n                let newArr = [...param];\r\n                let test = [];\r\n                let num = 0;\r\n                for(let i =0; i<constant.length; i++) {\r\n                  do{\r\n                    num = Math.floor(Math.random()*constant.length);\r\n                  }\r\n                  while(test.indexOf(num)>=0);\r\n                  newArr.splice(i, 1, constant[num]);\r\n                  test.push(num);\r\n                };\r\n                return newArr;\r\n              })(props.pictures)} />\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className = \"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}></input>\r\n\r\n)","import React from 'react';\nimport { Randomize } from './components/randomize/randomize.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pictures: [ \n        {\n          name: \"beach\",\n          id: \"img1\",\n          src: \"https://img1.10bestmedia.com/Images/Photos/352450/GettyImages-913753556_55_660x440.jpg\",\n          tagline: \"Isn't that just frikkin nice??\"\n        },\n        {\n          name: \"forest\",\n          id: \"img2\",\n          src: \"https://ichef.bbci.co.uk/news/320/cpsprodpb/B7B0/production/_101542074_gettyimages-956391468.jpg\",\n          tagline: \"makes me think of little magical elf mother fuckers\"\n        },\n        {\n          name: \"downtown\",\n          id: \"img3\",\n          src: \"https://upload.wikimedia.org/wikipedia/commons/1/1c/Laramie_Downtown_Historic_District.jpg\",\n          tagline: \"IN THE OOOOOOOOOOLD WEST\"\n        },\n        {\n          name: \"cat\",\n          id: \"img4\",\n          src: \"https://thumbs.dreamstime.com/z/red-cat-16532510.jpg\",\n          tagline: \"He's a cutie pie with tiny little ears, yeehaw\"\n        },\n        {\n          name: \"cozy room\",\n          id: \"img5\",\n          src: \"https://www.craftylittlegnome.com/wp-content/uploads/2018/10/bed-bedroom-contemporary-1329711.jpg\",\n          tagline: \"makes you wanta take a luxurious nappy nap, eh?\"\n        },\n        {\n          name: \"mountains\",\n          id: \"img6\",\n          src: \"https://www.worldatlas.com/r/w728-h425-c728x425/upload/66/14/d8/kangchenjunga.jpg\",\n          tagline: \"shred that gnar pow, boof hound!\"\n        },\n        {\n          name: \"whales\",\n          id: \"img7\",\n          src: \"https://images2.minutemediacdn.com/image/upload/c_fill,g_auto,h_1248,w_2220/f_auto,q_auto,w_1100/v1555389498/shape/mentalfloss/istock_000046395108_small_0.jpg\",\n          tagline: \"Our best friends on the planet, and greatest singers\"\n        },\n        {\n          name: \"snowy town\",\n          id: \"img8\",\n          src: \"https://previews.123rf.com/images/zssp/zssp1802/zssp180200040/96198046-a-small-snowy-town.jpg\",\n          tagline: \"Cozy and makes you wanta get y'all some hot cocoa!!\"\n        }\n      ],\n      searchField: \"\",\n    }\n  }\n  \n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n \n  render() {\n    const { pictures, searchField } = this.state; \n    const filteredPictures = pictures.filter(picture => \n        picture.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return (\n    <div className='App'>\n      <h1>Welcome To My Website</h1>\n            <br />\n            <br />\n      <SearchBox \n        placeholder = 'search pictures'\n        handleChange = {this.handleChange}\n      />\n      <Randomize pictures = {filteredPictures} />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}